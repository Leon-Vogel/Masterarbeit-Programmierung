# GENERATED BY CHATGPT

import matplotlib.pyplot as plt
import numpy as np
import random
from datetime import datetime


def plot_gantt(tasks, reverse_y_axis=True):
    # Group tasks by job
    jobs = {}
    for task in tasks:
        job_id = task["job"]
        if job_id not in jobs:
            jobs[job_id] = []
        jobs[job_id].append(task)

    # Define color map for jobs
    job_colors = {}
    colors = (
        ["r", "g", "b", "c", "m", "y", "k"]
        + [plt.cm.tab20(i) for i in range(20)]
        + [plt.cm.Pastel1(i) for i in range(9)]
        + [plt.cm.Set3(i) for i in range(12)]
        + [plt.cm.Accent(i) for i in range(8)]
        + [plt.cm.Dark2(i) for i in range(8)]
        + [plt.cm.Paired(i) for i in range(12)]
        + [plt.cm.tab10(i) for i in range(10)]
        + [plt.cm.tab20b(i) for i in range(20)]
        + [plt.cm.tab20c(i) for i in range(20)]
        + [plt.cm.Set1(i) for i in range(9)]
    )
    for job_id in jobs.keys():
        job_colors[job_id] = random.choice(colors)

    # Plot Gantt chart
    fig, ax = plt.subplots()

    # Set y axis limits and labels
    y_labels = sorted(set([task["resource"] for task in tasks]))
    ax.set_ylim([min(y_labels) - 0.5, max(y_labels) + 0.5])
    ax.set_yticks(y_labels)
    ax.set_yticklabels(y_labels)

    # Set x axis limits and labels
    x_min = min([task["start_time"] for task in tasks])
    x_max = max([task["end_time"] for task in tasks])
    ax.set_xlim([x_min, x_max])
    ax.set_xlabel("Time")
    ax.set_ylabel("Resource")


    # Reverse y Axis    
    if reverse_y_axis:
        ylim = ax.get_ylim()
        ax.set_ylim((ylim[1], ylim[0]))

    # Plot tasks
    for task in tasks:
        job_id = task["job"]
        y = task["resource"]
        start = task["start_time"]
        end = task["end_time"]
        duration = end - start

        def is_overlap(task1, task2):
            def is_in_bounds(t1,t2):
                t2_starts_whithin_t1 = t2["start_time"] >= t1["start_time"] and t2["start_time"] < t1["end_time"]
                t2_ends_within_t1 = t2["end_time"] > t1["start_time"] and t2["end_time"] <= t1["end_time"]
                return t2_starts_whithin_t1 or t2_ends_within_t1
            return is_in_bounds(task1,task2) or is_in_bounds(task2,task1)

        def get_overlaps_recurs(tsk, tabu=[], overlaps_found=[]):
            if tsk in tabu:
                return overlaps_found
            tabu.append(tsk)
            ovr = list(filter(lambda t: t["resource"] == tsk["resource"] and is_overlap(tsk, t), tasks))
            for o in ovr:
                if o not in overlaps_found:
                    overlaps_found.append(o)
                    get_overlaps_recurs(o, tabu, overlaps_found)
            return overlaps_found

        overlaps = get_overlaps_recurs(task)
        overlap_idx = list(map(lambda t: tasks.index(t), overlaps)).index(tasks.index(task))
        height = 0.2 / len(overlaps)
        offset = overlap_idx * height
        rect = plt.Rectangle((start, y + offset), duration, height, edgecolor="k", facecolor=job_colors[job_id])
        ax.add_patch(rect)

    # Create legend
    handles = []
    labels = []
    for job_id, job_color in job_colors.items():
        handles.append(plt.Rectangle((0, 0), 1, 1, edgecolor="k", facecolor=job_color))
        labels.append(f"Job {job_id}")
    ax.legend(handles, labels, bbox_to_anchor=(1.05, 1), loc="upper left")

    plt.show()


if __name__ == "__main__":
    # Example data
    tasks = [
        {"job": 1, "resource": 1, "start_time": 0, "end_time": 10},
        {"job": 2, "resource": 2, "start_time": 1, "end_time": 8},
        {"job": 1, "resource": 2, "start_time": 11, "end_time": 15},
        {"job": 2, "resource": 1, "start_time": 9, "end_time": 16},
        {"job": 3, "resource": 1, "start_time": 20, "end_time": 22},
        {"job": 4, "resource": 1, "start_time": 20, "end_time": 22},
        {"job": 5, "resource": 1, "start_time": 1, "end_time": 7},
    ]

    # tasks = [
    #     {"end_time": 2.0, "job": 1, "resource": 1, "start_time": 1.0},
    #     {"end_time": 4.0, "job": 1, "resource": 2, "start_time": 2.0},
    #     {"end_time": 1.0, "job": 2, "resource": 1, "start_time": 0.0},
    #     {"end_time": 6.0, "job": 2, "resource": 2, "start_time": 4.0},
    #     {"end_time": 9.0, "job": 3, "resource": 1, "start_time": 2.0},
    #     {"end_time": 12.0, "job": 3, "resource": 2, "start_time": 9.0},
    # ]
    plot_gantt(tasks)
    pass
